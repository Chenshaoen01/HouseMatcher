@model HouseMatcher.Models.HouseListViewModel

<div class="d-flex flex-column justify-content-center align-items-center mb-0 py-5">
    <div class="mb-5 px-3 px-md-0 w-100 d-flex justify-content-center">
        @Html.Partial("SearchArea")
    </div>
    <div id="map" class="search-map"></div>
</div>

<div>
    @{
        foreach (var house in Model.HouseList)
        {
            string HouseImgUrl = "/" + @house.HouseImg;
            string HouseAddress = house.City + house.District + house.Road + house.Location;
            <div class="map-house-data"
                 data-house-id="@house.HouseId"
                 data-house-img="@HouseImgUrl"
                 data-house-name="@house.HouseName"
                 data-rent-per-month="@house.RentPerMonth"
                 data-location="@house.Location"
                 data-address="@HouseAddress"
                 data-house-size="@house.HouseSize"
                 data-house-lat="@house.Latitude"
                 data-house-lng="@house.Longitude">
                @{
                    foreach (var houseFeature in house.FeaturLabelList)
                    {
                        <span class="house-feature" data-house-feature="@houseFeature.LabelName"></span>
                    }
                }
            </div>
        }
    }
</div>

@* 引入 google map api *@
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script>
    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
        key: "AIzaSyDoBWMwyPz6_nD11FUIXwFSwA51ErW1KfY",
        v: "weekly",
        // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
        // Add other bootstrap parameters as needed, using camel case.
    });
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDoBWMwyPz6_nD11FUIXwFSwA51ErW1KfY&callback=initMap&v=weekly"
        defer></script>
<script>
    const houseDataList = []
    $('.map-house-data').each(function(index, house) {
        const houseDataItem = {
            houseId: $(house).data('house-id'),
            houseImg: $(house).data('house-img'),
            houseName: $(house).data('house-name'),
            houseRentPerMonth: $(house).data('rent-per-month'),
            houseLocation: $(house).data('location'),
            houseAddress: $(house).data('address'),
            houseSize: $(house).data('house-size'),
            houseLat: $(house).data('house-lat'),
            houseLng: $(house).data('house-lng'),
            houseFeatureList: []
        }

        $(house).find('.house-feature').each(function (featureIndex, feature) {
            houseDataItem.houseFeatureList.push($(feature).data('house-feature'))
        })
        houseDataList.push(houseDataItem)
    })

    // 取得位置資訊
    function geo_success(position) {
        const lat = parseFloat(position.coords.latitude);
        const lng = parseFloat(position.coords.longitude);
        const isFirstMap = false
        initMap(isFirstMap, lat, lng)
    }

    function geo_error() {
        alert("Sorry, no position available.");
    }
    // 初始化地圖
    async function initMap(isFirstMap, lat, lng) {
        const { Map } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerView } = await google.maps.importLibrary("marker");

        const targetLat = lat ? lat : 25.02
        const targetLng = lng ? lng : 121.3
        const targetLocation = { lat: targetLat, lng: targetLng };
        window.map = new google.maps.Map(document.getElementById("map"), {
            zoom: 10,
            center: targetLocation,
        });

        if (isFirstMap) {
            // 取得位置資訊
            navigator.geolocation.getCurrentPosition(geo_success, geo_error)
        }

        houseDataList.forEach(houseDataItem => {
            addMarker(houseDataItem)
        })
    }

    const infoWindowArr = []

    function addMarker(houseDataItem) {
        const featureItem = houseDataItem.houseFeatureList.reduce((accumulator, currentValue) => {
            accumulator = accumulator + `<span class="feature-label">${currentValue}</span>`
            return accumulator
        }, "")

        const detailLink = window.location.origin + `/House/Detail/${houseDataItem.houseId}`

        const contentString = 
        `<div class="map-infowindow-box">
            <p class="map-infowindow-box-title">${houseDataItem.houseName}</p>
            <p class="map-infowindow-box-text">NT$ ${houseDataItem.houseRentPerMonth}/月</p>
            <p class="map-infowindow-box-text">地點：${houseDataItem.houseAddress}</p>
            <p class="map-infowindow-box-text">坪數：${houseDataItem.houseSize} 坪</p>
            <div class="d-flex mt-2">${featureItem}</div>
            <div class="d-flex justify-content-end mt-2">
                <a href="${detailLink}" class="custom-button" type="button">查看詳情</a>
            </div>
        </div>`

        const targetPosition = { lat: houseDataItem.houseLat, lng: houseDataItem.houseLng };
        const newMarker = new google.maps.Marker({
            position: targetPosition, map, title: houseDataItem.houseLocation,
        });

        const newInfowindow = new google.maps.InfoWindow({
            content: contentString,
            ariaLabel: houseDataItem.houseLocation,
        });

        infoWindowArr.push(newInfowindow)

        newMarker.addListener('click', function () {
            infoWindowArr.forEach(infowindow => infowindow.close())

            if (isInfoWindowOpen(newInfowindow)) {
                newInfowindow.close()
            } else {
                newInfowindow.open({ anchor: newMarker, map });
            }
        })
    }

    function isInfoWindowOpen(targetInfoWindow) {
        const map = targetInfoWindow.getMap()
        return (map !== null && typeof map !== "undefined");
    }

    initMap(true)
</script>


